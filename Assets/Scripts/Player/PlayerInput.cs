//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputAction/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""b8266a2e-40c4-4508-8e1f-dcf90016bca7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0d5a1f38-a06c-4668-90bc-430f4055ae13"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""0c09a217-310b-4d4b-9945-19df8f71c8ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Combat"",
                    ""type"": ""Value"",
                    ""id"": ""6e450f43-e838-452e-9320-35873b4b3614"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CombatHold"",
                    ""type"": ""Button"",
                    ""id"": ""33323e9b-2b6a-46e0-9dbb-b43a2e5b4e5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""64367f12-ba37-48cb-87ed-786b0d63947e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""233e8a9b-fef5-4f48-8e7c-e15b65395b44"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d9cc5ba1-a7b1-419c-88fe-71603a53766f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5af64c9b-8e05-49df-8311-59e2719ebd62"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bfbd687e-b81f-4f09-88eb-c372f5d63cc8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""421516a6-c415-4f3e-aaec-2eb37ea90e05"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dbf823f-6432-4c33-a200-a882c48f91ee"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ac295f4-0711-4d52-b267-55f0c911182e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OffGameplay"",
            ""id"": ""35b9b4b6-5e03-4f60-bf69-908590bff4c4"",
            ""actions"": [
                {
                    ""name"": ""KeyboardNav"",
                    ""type"": ""Value"",
                    ""id"": ""a9d7d4ac-19bb-44fa-bfe9-b7d1867ca666"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""e28716f4-fd31-4625-aa53-f5a36377a0ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f53bf1e0-77a2-47e0-a950-da91f9f7934e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""38145419-0624-483b-84f1-49ded5989e3f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardNav"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9a50c5a0-1a5a-4517-b2d0-c6722ff53718"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c6c20bf3-e345-4225-96ac-0736006196c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b726499f-ed7a-4168-8d1f-87fb575bf6fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9cc9808a-3742-48d7-b5ab-142cf734bf39"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_MousePos = m_Gameplay.FindAction("MousePos", throwIfNotFound: true);
        m_Gameplay_Combat = m_Gameplay.FindAction("Combat", throwIfNotFound: true);
        m_Gameplay_CombatHold = m_Gameplay.FindAction("CombatHold", throwIfNotFound: true);
        // OffGameplay
        m_OffGameplay = asset.FindActionMap("OffGameplay", throwIfNotFound: true);
        m_OffGameplay_KeyboardNav = m_OffGameplay.FindAction("KeyboardNav", throwIfNotFound: true);
        m_OffGameplay_Submit = m_OffGameplay.FindAction("Submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_MousePos;
    private readonly InputAction m_Gameplay_Combat;
    private readonly InputAction m_Gameplay_CombatHold;
    public struct GameplayActions
    {
        private @PlayerInput m_Wrapper;
        public GameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @MousePos => m_Wrapper.m_Gameplay_MousePos;
        public InputAction @Combat => m_Wrapper.m_Gameplay_Combat;
        public InputAction @CombatHold => m_Wrapper.m_Gameplay_CombatHold;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Combat.started += instance.OnCombat;
            @Combat.performed += instance.OnCombat;
            @Combat.canceled += instance.OnCombat;
            @CombatHold.started += instance.OnCombatHold;
            @CombatHold.performed += instance.OnCombatHold;
            @CombatHold.canceled += instance.OnCombatHold;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Combat.started -= instance.OnCombat;
            @Combat.performed -= instance.OnCombat;
            @Combat.canceled -= instance.OnCombat;
            @CombatHold.started -= instance.OnCombatHold;
            @CombatHold.performed -= instance.OnCombatHold;
            @CombatHold.canceled -= instance.OnCombatHold;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // OffGameplay
    private readonly InputActionMap m_OffGameplay;
    private List<IOffGameplayActions> m_OffGameplayActionsCallbackInterfaces = new List<IOffGameplayActions>();
    private readonly InputAction m_OffGameplay_KeyboardNav;
    private readonly InputAction m_OffGameplay_Submit;
    public struct OffGameplayActions
    {
        private @PlayerInput m_Wrapper;
        public OffGameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardNav => m_Wrapper.m_OffGameplay_KeyboardNav;
        public InputAction @Submit => m_Wrapper.m_OffGameplay_Submit;
        public InputActionMap Get() { return m_Wrapper.m_OffGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OffGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IOffGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_OffGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OffGameplayActionsCallbackInterfaces.Add(instance);
            @KeyboardNav.started += instance.OnKeyboardNav;
            @KeyboardNav.performed += instance.OnKeyboardNav;
            @KeyboardNav.canceled += instance.OnKeyboardNav;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IOffGameplayActions instance)
        {
            @KeyboardNav.started -= instance.OnKeyboardNav;
            @KeyboardNav.performed -= instance.OnKeyboardNav;
            @KeyboardNav.canceled -= instance.OnKeyboardNav;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IOffGameplayActions instance)
        {
            if (m_Wrapper.m_OffGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOffGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_OffGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OffGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OffGameplayActions @OffGameplay => new OffGameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnCombat(InputAction.CallbackContext context);
        void OnCombatHold(InputAction.CallbackContext context);
    }
    public interface IOffGameplayActions
    {
        void OnKeyboardNav(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
}
